<Window x:Class="IntellectOPK.Views.ListView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:IntellectOPK.Views"
        xmlns:molser="clr-namespace:MolserLib.Controls;assembly=MolserLib"
        mc:Ignorable="d"
        xmlns:conv="clr-namespace:IntellectOPK.Converters"
        xmlns:templateSelectors="clr-namespace:IntellectOPK.TemplateSelectors"
        xmlns:commands="clr-namespace:IntellectOPK.Commands"
        Title="{Binding Title}" 
        MaxHeight="1920"
        MaxWidth="1080"
        Height="640"
        Width="550"
        SizeToContent="Manual"
        Style="{StaticResource VS2012WindowStyle}"
        ResizeMode="CanResizeWithGrip">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="boolToUIVisibilityConverter" />
        <conv:BoolToUIVisibilityInverseConverter x:Key="boolToUIVisibilityInverseConverter"/>
        <conv:NullToVisibilityConverter x:Key="nullToVisibilityConverter"/>
        <conv:BoolToBoolInverseConverter x:Key="inverseBooleanConverter" />
        <!--<conv:ImageConverter x:Key="imageConverter" />-->
        <conv:BoolToUIVisibilityMultiConverter x:Key="boolToUIVisibilityMultiConverter" />
        <conv:AsyncImageConverter x:Key="asyncImageConverter" />
        <conv:DataBaseIconVisibilityConverter x:Key="dataBaseIconVisibilityConverter" />
        <conv:NullToBoolConverter x:Key="nullToBoolConverter"/>
        <conv:BoolToHeadersVisibilityConverter x:Key="boolToHeadersVisibilityConverter"/>
        
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="commands:CustomCommands.Find" CanExecute="FindCommand_CanExecute" Executed="FindCommand_Executed" />
        <CommandBinding Command="commands:CustomCommands.FindCancel" Executed="FindCancelCommand_Executed" />
    </Window.CommandBindings>
    <Grid Margin="15,0,15,10" DockPanel.Dock="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="30"  />
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <ToolBar Grid.Row="0">
            <!--<Button x:Name="uncheckAllButton" 
                    Margin="0,0,5,0"
                    ToolTip="Снять выделение со всех" 
                    Width="32"
                    Click="uncheckAllButton_Click"
                    Visibility="{Binding IsSelectableMode, Converter={StaticResource bool2VisibilityConverter}}">                
                    <Border BorderThickness="0" Background="Transparent" Padding="2">
                        <ContentControl Content="{StaticResource UncheckAllViewbox}"/>
                    </Border>               
            </Button>-->
            <ToggleButton x:Name="showOnlyCheckedButton"                           
                          Width="32" Margin="0,0,10,0"
                          Checked="showOnlyCheckedButton_Checked"
                          Unchecked="showOnlyCheckedButton_Unchecked"
                          IsChecked="{Binding IsOnlyCheckedShowed}"
                          Visibility="{Binding IsSelectableMode, Converter={StaticResource bool2VisibilityConverter}}">
                <Border BorderThickness="0" Background="Transparent" Padding="2">
                    <ContentControl Content="{StaticResource FilterOnlyCheckedViewbox}"/>
                </Border>
                <ToggleButton.Style>
                    <Style TargetType="ToggleButton" BasedOn="{StaticResource ToolBarButtonBaseStyle}">
                        <Setter Property="ToolTip" Value="Показать только выделенные"/>
                        <Style.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="ToolTip" Value="Показаны только выделенные"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
                <Grid >
                    <molser:MsTextBox x:Name="findTextBox" 
                                Padding="0,0,20,0"   
                                Grid.Row="0"
                                Grid.Column="0"
                                Width="160"                            
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ToolTip="Найти"
                                TextWrapping="Wrap"
                                MouseDoubleClick="selectAllTextBox"
                                GotKeyboardFocus="selectAllTextBox"
                                PreviewMouseLeftButtonDown="selectivelyIgnoreMouseButton"
                                TextChanged="findTextBox_TextChanged"
                                Text="{Binding FilterFindValue, UpdateSourceTrigger=PropertyChanged}"
                                Watermark="Найти...">
                        <molser:MsTextBox.InputBindings>
                            <KeyBinding Key="Enter" Command="commands:CustomCommands.Find"/>
                        </molser:MsTextBox.InputBindings>
                    </molser:MsTextBox>
                </Grid>
                <!--<Button DockPanel.Dock="Right"
                        Height="24" Width="30" Margin="0,0,0,0"  
                        ToolTip="Поиск"
                        Command="commands:CustomCommands.Find"
                        Content="{StaticResource FindCanvas}">
                </Button>-->
            
            <StackPanel Margin="10,0,0,0" Orientation="Horizontal"
                        Visibility="{Binding IsFilterListEnable, Mode=OneWay, Converter={StaticResource boolToUIVisibilityConverter}}">
                <TextBlock Text="Отдел:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                <ComboBox x:Name="filterListComboBox"
                        MinWidth="80"
                        HorizontalAlignment="Stretch"
                        ItemsSource="{Binding Departments}"
                        SelectedIndex="0"
                        SelectedItem="{Binding FilterListValue}"
                        SelectionChanged="filterListComboBox_SelectionChanged"
                        Margin="0,0,10,0"
                        VerticalAlignment="Center">
                </ComboBox>
            </StackPanel>
            <Button Width="32"
                    Command="{Binding ExportToMSExcelCommand}"
                    ToolTip="Экспортировать в MS Excel" ToolTipService.ShowOnDisabled="True"
                    Visibility="{Binding IsExportEnable, Converter={StaticResource boolToUIVisibilityConverter}}"
                    Content="{StaticResource MsExcelCanvas}">
            </Button>
        </ToolBar>
        <Grid Grid.Row="1" >
            <Grid.RowDefinitions>
                <!--<RowDefinition Height="auto"/>-->
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <!--<TextBlock Grid.Row="0" Grid.Column="0" Text="Сотрудники:"/>-->
            <FrameworkElement x:Name="dummyElement" Visibility="Collapsed"/>
            <CheckBox x:Name="dummyCheckAllCheckBox" Visibility="Collapsed"/>
            <DataGrid Grid.Row="0" x:Name="itemsDataGrig" Margin="0,5,0,0"
                ItemsSource="{Binding Items, NotifyOnTargetUpdated=True}"                              
                SelectedItem="{Binding SelectedItem}"
                HorizontalAlignment="Stretch" 
                VerticalAlignment="Top"
                AutoGenerateColumns="False"
                Visibility="{Binding Items, Converter={StaticResource nullToVisibilityConverter}}" 
                GridLinesVisibility="Horizontal"
                HorizontalGridLinesBrush="{StaticResource DataGridLinesBrush}"
                CanUserResizeRows="False"
                CanUserAddRows="False"
                HeadersVisibility="{Binding IsStatisticsHidden, Mode=OneWay, Converter={StaticResource boolToHeadersVisibilityConverter}}" 
                SelectionMode="Single"
                LoadingRow="dataGrid_LoadingRow"
                EnableRowVirtualization="True"
                EnableColumnVirtualization="True"
                VirtualizingPanel.VirtualizationMode="Recycling"
                TargetUpdated="DataGrid_TargetUpdated"
                MaxWidth="1920"
                MaxHeight="1080"    
                IsTextSearchEnabled="True"
                TextSearch.TextPath="Name"
                IsReadOnly="True">
                <!--EnableRowVirtualization="True"
                EnableColumnVirtualization="True"
                VirtualizingPanel.IsVirtualizing="True"
                VirtualizingPanel.VirtualizationMode="Recycling"-->
                <DataGrid.Resources>
                    <DataTemplate x:Key="StandardCheckedCellDataTemplate">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <CheckBox Grid.Row="0"  Margin="0,0,0,0"
                                              HorizontalAlignment="Left" VerticalAlignment="Center"
                                              IsChecked="{Binding Path=IsChecked, IsAsync=True, UpdateSourceTrigger=PropertyChanged}"/>
                        </Grid>
                    </DataTemplate>
                    <DataTemplate x:Key="PersonCheckedCellDataTemplate">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <CheckBox Grid.Row="0"  Margin="0,0,0,0" Height="18" Width="18"
                                              HorizontalAlignment="Left" VerticalAlignment="Center"
                                              IsChecked="{Binding Path=IsChecked, IsAsync=True, UpdateSourceTrigger=PropertyChanged}"/>
                        </Grid>
                    </DataTemplate>
                </DataGrid.Resources>
                <DataGrid.Columns>
                    <DataGridTemplateColumn Header="" IsReadOnly="False" CanUserSort="True" SortMemberPath="IsChecked"
                                            Visibility="{Binding DataContext.IsSelectableMode,
                                                                 Source={x:Reference dummyElement},
                                                                 Converter={StaticResource boolToUIVisibilityConverter}}">
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <Grid Margin="0,0,0,0">
                                    <CheckBox x:Name="checkAllCheckBox"
                                           HorizontalAlignment="Left"
                                            IsChecked="{Binding IsChecked, ElementName=dummyCheckAllCheckBox}"
                                            Click="CheckAllCheckBox_Click">
                                        <!--IsChecked="{Binding DataContext.CheckedUncheckedAll, 
                                                            Mode=TwoWay, RelativeSource={RelativeSource AncestorType=Window}, 
                                                            UpdateSourceTrigger=PropertyChanged}"-->
                                        <CheckBox.Style>
                                            <Style TargetType="CheckBox" BasedOn="{StaticResource StandardCheckBox}">
                                                <Setter Property="ToolTip" Value="Выбрать все"/>
                                                <Style.Triggers>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter Property="ToolTip" Value="Снять выделение со всех"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </CheckBox.Style>
                                    </CheckBox>
                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                        <DataGridTemplateColumn.CellTemplateSelector>
                            <templateSelectors:CheckedCellTemplateSelector
                                StandardCheckedCellDataTemplate="{StaticResource StandardCheckedCellDataTemplate}"
                                PersonCheckedCellDataTemplate="{StaticResource PersonCheckedCellDataTemplate}">
                           </templateSelectors:CheckedCellTemplateSelector>
                        </DataGridTemplateColumn.CellTemplateSelector>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Фото" IsReadOnly="True" Width="60" MinWidth="60"
                                            Visibility="{Binding DataContext.ItemProperties[PersonPhoto],
                                                                 Source={x:Reference dummyElement},
                                                                 Converter={StaticResource boolToUIVisibilityConverter}}">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Grid DataContext="{Binding Path=DataContext,
                                                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, 
                                                                Converter={StaticResource asyncImageConverter}}">
                                    <Viewbox>
                                        <ContentControl 
                                                Content="{StaticResource PersonPath}" 
                                                Foreground="{StaticResource PersonPathBrush}">                                            
                                        </ContentControl>
                                        <Viewbox.Style>
                                            <Style TargetType="Viewbox">
                                                <Setter Property="Visibility" Value="Hidden"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Result}"  Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Viewbox.Style>
                                    </Viewbox>
                                    <Viewbox>
                                        <Label HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    Foreground="DarkGray"
                                                    Content="загрузка..." 
                                                    Visibility="{Binding IsNotCompleted, Converter={StaticResource bool2VisibilityConverter}}"/>
                                    </Viewbox>
                                    <Viewbox>
                                        <Label HorizontalAlignment="Center"
                                            VerticalAlignment="Center" 
                                            Foreground="Red"
                                            Content="ошибка" 
                                            Visibility="{Binding IsFaulted, Converter={StaticResource bool2VisibilityConverter}}"/>
                                    </Viewbox>
                                    <Image x:Name="PersonPhoto" 
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Bottom"
                                        Source="{Binding Result}"/>
                                    <Viewbox Height="14" 
                                            HorizontalAlignment="Left" 
                                            VerticalAlignment="Bottom"
                                            Visibility="{Binding Converter={StaticResource dataBaseIconVisibilityConverter}}"
                                            ToolTip="Данные из дополнительной базы данных">
                                        <Border Background="White" Padding="7">
                                            <ContentControl Content="{StaticResource DataBasePath}" Foreground="Orange"/>
                                        </Border>
                                    </Viewbox>
                                </Grid>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="Данные" CanUserSort="True" SortMemberPath="Name" 
                                            Visibility="{Binding DataContext.ItemProperties[PersonData],
                                                                 Source={x:Reference dummyElement},
                                                                 Converter={StaticResource boolToUIVisibilityConverter}}">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Grid>                                    
                                    <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                                        <TextBlock x:Name="content" Text="{Binding Path=Name, IsAsync=False}"/>
                                        <TextBlock Text="{Binding Path=Surname, IsAsync=False}"/>
                                        <TextBlock Text="{Binding Path=Patronymic, IsAsync=False}"/>
                                        <TextBlock Text="{Binding Path=Department, IsAsync=False}" FontStyle="Italic"/>
                                    </StackPanel>
                                    <Button x:Name="personInfoButton"
                                                    Margin="0,0,10,0"                                                    
                                                    Visibility="Collapsed"
                                                    Background="{StaticResource DataGridSelectedCellBrush}"
                                                    HorizontalAlignment="Right" VerticalAlignment="Top"
                                                    Width="22" Height="22"
                                                    Command="{Binding DataContext.ShowPersonViewCommand,
                                                                        RelativeSource={RelativeSource FindAncestor, 
                                                                                                        AncestorType={x:Type DataGrid}}}"
                                                    ToolTip="Показать сотрудника"
                                                    Content="{StaticResource InfoViewbox}"/>
                                </Grid>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridCell}}}" Value="True">
                                        <Setter TargetName="personInfoButton" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Название" Binding="{Binding Path=Name, IsAsync=False}" IsReadOnly="True"
                                        Visibility="{Binding DataContext.ItemProperties[Name],
                                                                 Source={x:Reference dummyElement},
                                                                 Converter={StaticResource boolToUIVisibilityConverter}}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Описание" Binding="{Binding Path=Description, IsAsync=False}" IsReadOnly="True"
                                        Visibility="{Binding DataContext.ItemProperties[Description], 
                                                                 Source={x:Reference dummyElement},
                                                                 Converter={StaticResource boolToUIVisibilityConverter}}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="ID" Binding="{Binding Path=Id, IsAsync=False}" IsReadOnly="True" />                  
                </DataGrid.Columns>
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell" BasedOn="{StaticResource StandardDataGridCell}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Type, IsAsync=False}" Value="основной">
                                <Setter Property="Foreground" Value="Green"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Type, IsAsync=False}" Value="дополнительный">
                                <Setter Property="Foreground" Value="Crimson"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Type, IsAsync=False}" Value="авк">
                                <Setter Property="Foreground" Value="Blue"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.CellStyle>
                <!--<DataGrid.RowDetailsTemplate>
                    <DataTemplate>
                        <TextBlock Padding="10,0,0,0" Text="{Binding Path=Department}" FontStyle="Italic" Background="LightGreen"/>
                    </DataTemplate>
                </DataGrid.RowDetailsTemplate>-->
                <!--<DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource StandardDataGridRow}">
                        <Setter Property="ToolTipService.InitialShowDelay" Value="1000"/>
                        <Setter Property="ToolTipService.BetweenShowDelay" Value="1000"/>
                        <Setter Property="ToolTip.HorizontalOffset" Value="20"/>
                        <Setter Property="ToolTip.VerticalOffset" Value="10"/>
                        <Setter Property="ToolTip">
                            <Setter.Value>
                                <TextBlock Text="{Binding Department}" />
                            </Setter.Value>                            
                        </Setter>
                    </Style>
                </DataGrid.RowStyle>-->
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Показать сотрудникa"
                                     Command="{Binding ShowPersonViewCommand}"/>
                        <MenuItem Header="Копировать" Command="Copy"/>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.InputBindings>
                    <MouseBinding Gesture="LeftDoubleClick" 
                                  Command="{Binding ShowPersonViewCommand}"/>
                </DataGrid.InputBindings>
            </DataGrid>
        </Grid>
        <Grid Grid.Row="2" Margin="0,5,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <StackPanel Grid.Column="0" Margin="10,0,0,0" 
                        Orientation="Horizontal" 
                        VerticalAlignment="Top">
                <StackPanel.Visibility>
                    <MultiBinding Mode="OneWay" Converter="{StaticResource boolToUIVisibilityMultiConverter}">
                        <Binding Mode="OneWay" Path="IsSelectableMode" />
                        <Binding Mode="OneWay" Path="IsStatisticsHidden" Converter="{StaticResource inverseBooleanConverter}"/>
                    </MultiBinding>
                </StackPanel.Visibility>
                <TextBlock Text="Выбрано: "/>
                <TextBlock Text="{Binding SelectedItemsCount}"/>
            </StackPanel>
            <StackPanel Margin="5,0,0,0" 
                        Grid.Column="1" 
                        Name="rowsCountStackPanel" 
                        Orientation="Horizontal" 
                        VerticalAlignment="Top"
                        Visibility="{Binding IsStatisticsHidden,  Mode=OneWay, Converter={StaticResource boolToUIVisibilityInverseConverter}}">
                <TextBlock Text="Показано: "/>
                <TextBlock Name="rowsCountTextBox" Text="{Binding Path=Items.Count, ElementName=itemsDataGrig}"/>
                <TextBlock Margin="5,0,0,0" Text="Всего: "/>
                <TextBlock Text="{Binding Items.Count}"/>
            </StackPanel>
        </Grid>                
        <StackPanel Grid.Row="2"
            Margin="0,5,0,0" 
            Orientation="Horizontal" 
            HorizontalAlignment="Right"
            VerticalAlignment="Top">
            <Button Height="26" Width="60"  HorizontalAlignment="Left" Content="OK" Command="{Binding ConfirmCommand}" IsDefault="True"/>
            <Button HorizontalAlignment="Left" IsCancel="True" Click="CloseWindow_Click" Content="Отмена" Margin="10,0,0,0" Height="26" Width="60"/>
        </StackPanel>
    </Grid>
</Window>
